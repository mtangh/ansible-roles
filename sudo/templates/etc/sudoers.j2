# SUDOers
# {{ ansible_managed }}
# Do NOT modify this file directly.
{%  import 'macros.sudoers.j2' as m with context %}
#
# sudoers file.
#
# This file MUST be edited with the 'visudo' command as root.
# Failure to use 'visudo' may result in syntax or file permission errors
# that prevent sudo from running.
#
# See the sudoers man page for the details on how to write a sudoers file.
#

##
# Host alias specification
##
#
# Groups of machines. You may prefer to use hostnames (perhaps using
# wildcards for entire domains) or IP addresses instead.
#
# Host_Alias     FILESERVERS = fs1, fs2
# Host_Alias     MAILSERVERS = smtp, smtp2
#
{{  m.make_aliases_from('Host_Alias',sudo_sudoers_host_aliases) }}

##
# User alias specification
##
#
# These aren't often necessary, as you can use regular groups
# (ie, from files, LDAP, NIS, etc) in this file - just use %groupname
# rather than USERALIAS
#
# User_Alias ADMINS = jsmith, mikem
#
{{  m.make_aliases_from('User_Alias',sudo_sudoers_user_aliases) }}

##
# Runas alias specification
##
{{  m.make_aliases_from('Runas_Alias',sudo_sudoers_runas_aliases) }}

##
# Command alias specification
##
#
# These are groups of related commands...
#
# - Networking
#   Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/iptables
# - Installation and management of software
#   Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum
# - Services
#   Cmnd_Alias SERVICES = /sbin/service, /sbin/chkconfig
# - Updating the locate database
#   Cmnd_Alias LOCATE = /usr/bin/updatedb
# - Storage
#   Cmnd_Alias STORAGE = /sbin/fdisk, /bin/mount, /bin/umount
# - Delegating permissions
#   Cmnd_Alias DELEGATING = /usr/sbin/visudo, /bin/chown, /bin/chmod, /bin/chgrp
# - Processes
#   Cmnd_Alias PROCESSES = /bin/nice, /bin/kill, /usr/bin/kill, /usr/bin/killall
# - Drivers
#   Cmnd_Alias DRIVERS = /sbin/modprobe
#
{{  m.make_aliases_from('Cmnd_Alias',sudo_sudoers_cmnd_aliases) }}

##
# Defaults specification
##
#
# Override built-in defaults
#
{%  if sudo_sudoers_defaults|d(none) is not none %}
{%  for e in sudo_sudoers_defaults|d([])
        if e|d(none) is not none %}
{%    set dflts = e.default
          if e.default|d(none) is not none
          and e.default is iterable and e.default is not string
          else ([e.default|trim] if e.default|d(none) is string
                and e.default|d(none) not in ['-','#']
          else (e.default if e.default|d(none) in ['-','#'] 
          else ([e|trim] if e|d(none) is string
                and e|d(none) not in ['-','#']
          else (e if e|d(none) in ['-','#'] else none)))) %}
{%    set cmnts = e.comment
          if e.comment|d(none) is not none
          and e.comment is iterable and e.comment is not string
          else (e.comment.split('\n') if e.comment|d(none) is string else []) %}
{%    if dflts|d(none) is not none and dflts in ['-','#'] %}
{{ '#' if dflts == '#' else '' }}
{%    endif %}
{%    for c in cmnts if c is not none and c|length > 0 %}
{{ '# %s'|format(c)|trim }}
{%    endfor %}
{%    if dflts|d(none) is not none and dflts not in ['-','#'] %}
{%      for dv in dflts|d([]) if dflts|d(none) is not none and dv|length > 0 %}
Defaults    {{ dv|trim }}
{%      endfor %}
{%    endif %}
{%  endfor %}
{%  endif %}

##
# User privilege specification
##
#
# root can run anything on any machine as any user
root            ALL=(ALL) ALL
#
# Uncomment to allow people in group {{ sudo_administrator_group|d('wheel') }} to run all commands
#{{ '%s%-14s'|format('%',sudo_administrator_group|d('wheel')) }} ALL=(ALL) ALL
#
# Same thing without a password
#{{ '%s%-14s'|format('%',sudo_administrator_group|d('wheel')) }} ALL=(ALL) NOPASSWD: ALL
#
# Samples
#%users          ALL=/sbin/mount /cdrom,/sbin/umount /cdrom
#%users          localhost=/sbin/shutdown -h now
#
{%  if sudo_sudoers_rules|d(none) is not none %}
{%  for rule in sudo_sudoers_rules|d([])
        if rule is not none %}
{%    set r = {
        'u': (rule.users|trim if rule.users|d(none) is not none else
             (rule|trim if rule is string else none)),
        'h': (rule.hosts|trim if rule.hosts|d(none) is not none else 'ALL'),
        'ra':(rule.runas|trim if rule.runas|d(none) is not none else 'ALL'),
        'np':('NOPASSWD: ' if rule.nopasswd|d(none) is not none
                           and rule.nopasswd|bool
                           else '') } %}
{%    set r_cmd = rule.commands|join(', ')
        if rule.commands|d(none) is not none
        and (rule.commands is iterable and rule.commands is not string)
        else (rule.commands|trim
              if rule.commands|d(none) is string else 'ALL') %}
{%    set r_cmnts = rule.comment
        if rule.comment|d(none) is not none
        and (rule.comment is iterable and rule.comment is not string)
        else (rule.comment.split('\n')
              if rule.comment|d(none) is string else []) %}
{%    if r.u|d(none) is not none and r.u in ['-','#'] %}
{{ '#' if r.u == '#' else '' }}
{%    endif %}
{%    for c in r_cmnts if c is not none and c|length > 0 %}
{{ '# %s'|format(c|trim) }}
{%    endfor %}
{%    if r.u|d(none) is not none and r.u not in ['-','#'] %}
{{ '%-15s %s=(%s) %s%s'|format(r.u,r.h,r.ra,r.np,r_cmd)|trim }}
{%    endif %}
{%  endfor %}
{%  endif %}
{%  set _dropins_dir =
        sudo_sudoers_dropins_dir.path|trim
        if sudo_sudoers_dropins_dir|d(none) is mapping
        and sudo_sudoers_dropins_dir.path|d(none) is string
        and sudo_sudoers_dropins_dir.path|trim|length > 0
        else sudo_sudoers_dropins_dir|trim
        if sudo_sudoers_dropins_dir|d(none) is string
        and sudo_sudoers_dropins_dir|trim|length > 0
        and not(sudo_sudoers_dropins_dir|trim|lower|match('^(no|false)$'))
        else none %}

##
# Read drop-in files from {{ _dropins_dir if _dropins_dir is not none else '/etc/sudoers.d' }}
{%    if _dropins_dir is none %}
# (the # here does not mean a comment)
{%    endif %}
##
{%  if _dropins_dir is none %}#{% endif -%}
includedir {{ _dropins_dir if _dropins_dir is not none else '/etc/sudoers.d' }}
{%  endif %}

