# sysctl.conf
# {{ ansible_managed }}
#
# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.
{%  set p = sysctl_conf_params if sysctl_conf_params is defined else none -%}

# Controls IP packet forwarding
{%  if p['net.ipv4.ip_forward'] is undefined
    or p['net.ipv4.ip_forward'] is not number
    or p['net.ipv4.ip_forward'] not in [0,1] %}{{ '#' }}{% endif -%}
net.ipv4.ip_forward = 0

# Controls source route verification
{%  if p['net.ipv4.conf.default.rp_filter'] is undefined
    or p['net.ipv4.conf.default.rp_filter'] is not number
    or p['net.ipv4.conf.default.rp_filter'] not in [0,1] %}{{ '#' }}{% endif -%}
net.ipv4.conf.default.rp_filter = 1

# Controls the use of TCP syncookies
{%  if p['net.ipv4.tcp_syncookies'] is undefined
    or p['net.ipv4.tcp_syncookies'] is not number
    or p['net.ipv4.tcp_syncookies'] not in [0,1] %}{{ '#' }}{% endif -%}
net.ipv4.tcp_syncookies = 1

# Controls the System Request debugging functionality of the kernel
{%  if p['kernel.sysrq'] is undefined
    or p['kernel.sysrq'] is not number
    or p['kernel.sysrq'] not in [0,1] %}{{ '#' }}{% endif -%}
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
{%  if p['kernel.core_uses_pid'] is undefined
    or p['kernel.core_uses_pid'] is not number
    or p['kernel.core_uses_pid'] not in [0,1] %}{{ '#' }}{% endif -%}
kernel.core_uses_pid = 1

# Controls the default maxmimum size of a mesage queue
{%  if p['kernel.msgmnb'] is undefined
    or p['kernel.msgmnb'] is not number
    or p['kernel.msgmnb'] == 0 %}{{ '#' }}{% endif -%}
kernel.msgmnb = {{ p['kernel.msgmnb'] if p['kernel.msgmnb'] < 0 else 65536 }}

# Controls the maximum size of a message, in bytes
{%  if p['kernel.msgmax'] is undefined
    and p['kernel.msgmax'] is not number
    and p['kernel.msgmax'] == 0 %}{{ '#' }}{% endif -%}
kernel.msgmax = {{ p['kernel.msgmax'] if p['kernel.msgmax'] < 0 else 65536 }}

# Controls the maximum shared segment size, in bytes
{%  if p['kernel.shmmax'] is undefined
    and p['kernel.shmmax'] is not number
    and p['kernel.shmmax'] == 0 %}{{ '#' }}{% endif -%}
kernel.shmmax = {{ p['kernel.shmmax'] if p['kernel.shmmax'] < 0 else 68719476736 }}

# Controls the maximum number of shared memory segments, in pages
{%  if p['kernel.shmall'] is undefined
    and p['kernel.shmall'] is not number
    and p['kernel.shmall'] == 0 %}{{ '#' }}{% endif -%}
kernel.shmall = {{ p['kernel.shmall'] if p['kernel.shmall'] < 0 else 4294967296 }}

{%  if p is defined and p is not none %}
# Additional Kernel sysctl configuration
{%  for key, value in p|dictsort
      if key not in [ '_',
                      'net.ipv4.ip_forward',
                      'net.ipv4.conf.default.rp_filter',
                      'net.ipv4.conf.default.accept_source_route',
                      'net.ipv4.tcp_syncookies',
                      'kernel.sysrq', 'kernel.core_uses_pid',
                      'kernel.msgmnb', 'kernel.msgmax',
                      'kernel.shmmax', 'kernel.shmall' ] %}
{{ '%s = %s'|format(key,value)|trim }}
{%    endfor %}
{%  endif %}

